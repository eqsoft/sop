{
    "project": {
        "name": "The SCORM-Offline-Player API",
        "description": "The SCORM-Offline-Player API: a Firefox extension for running SCORM-Courses offline ",
        "version": "0.1",
        "url": "https://github.com/eqsoft"
    },
    "files": {
        "db.js": {
            "name": "db.js",
            "modules": {},
            "classes": {
                "db": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "env.js": {
            "name": "env.js",
            "modules": {},
            "classes": {
                "env": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gui.js": {
            "name": "gui.js",
            "modules": {},
            "classes": {
                "gui": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "main.js": {
            "name": "main.js",
            "modules": {},
            "classes": {
                "main": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "som.js": {
            "name": "som.js",
            "modules": {},
            "classes": {
                "som": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils.js": {
            "name": "utils.js",
            "modules": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "db": {
            "name": "db",
            "shortname": "db",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "db.js",
            "line": 1,
            "description": "Database class"
        },
        "env": {
            "name": "env",
            "shortname": "env",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "env.js",
            "line": 1,
            "description": "environment class\n \nThe environment class is responsible for the availability of a proper runtime: db, profile, io objects and webserver. \nThe run event must be triggered from the som and sop classes, but the env class ensures that the env is running only once.\nThe environment listens to all window tabs and stops if neither som nor sop instances are running.\n\nIf no som instance is open and the env is not running and the user tries to open a bookmarked SCORM course at localhost:serverPort, \nthe httpObserver ensures that the env is running before the network request will be completed."
        },
        "gui": {
            "name": "gui",
            "shortname": "gui",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "gui.js",
            "line": 1,
            "description": "GUI class for SCORM-Offline-Manager and -Player"
        },
        "main": {
            "name": "main",
            "shortname": "main",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "main.js",
            "line": 1,
            "description": "Mandatory addon main class\n \nThe main class receives and emits all load and unload events like \"startup, install, uninstall...\" for all other classes\nTherefore all other classes (env, som, gui, db, utils) needs to be included inside main.js after early binding of the events. \n\nSee also: <a href=\"https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html\" target=\"_new\">https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html</a>"
        },
        "som": {
            "name": "som",
            "shortname": "som",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "som.js",
            "line": 1,
            "description": "SCORM-Offline-Manager class\n\nProvides functions for managing and importing Learning-Modules"
        },
        "utils": {
            "name": "utils",
            "shortname": "utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "utils.js",
            "line": 1,
            "description": "Utilities class"
        }
    },
    "classitems": [
        {
            "file": "db.js",
            "line": 13,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 17,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "once",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 21,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeListener",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 44,
            "description": "opens the sqlite database sop.sqlite in the profile folder",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "openDb",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 63,
            "description": "closes the sqlite database sop.sqlite in the profile folder",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "closeDb",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 76,
            "description": "gets data from db",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "statement",
                    "description": "the name of the statement",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "asJSONObject",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "asRecordObject=true",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object||String"
            },
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 115,
            "itemtype": "event",
            "name": "lmUserDataChanged",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 118,
            "description": "gets data from db",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "dbData",
            "params": [
                {
                    "name": "statement",
                    "description": "the name of the statement",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "success",
                "type": "Boolean"
            },
            "class": "db"
        },
        {
            "file": "env.js",
            "line": 21,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 25,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "once",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 29,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeListener",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 46,
            "description": "get the running status\nThe function needs early binding for other classes",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isRunning",
            "return": {
                "description": "running",
                "type": "Boolean"
            },
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 93,
            "description": "IO Object\nProvides all File and Directory Objects",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "io",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 101,
            "description": "Globals Object\nProvides all global Variables",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "globals",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 116,
            "description": "HTTP Observer\nObserves browser network requests to sop webserver at localhost:serverPort.\nIf the browser requests a Learning-Module and the environment is not running, the observer starts the environment.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "httpRequestObserver",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 153,
            "itemtype": "event",
            "name": "run",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 156,
            "description": "starts the environment components (io, db, server) and populates the profile\n\nemits a run event",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "run",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 180,
            "description": "initialize all necessary file and directory objects",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initIO",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 215,
            "description": "populates the profile folder with an initial db and a webserver root folder with the SCORM-Offline-Player files if not exists.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "populateProfile",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 249,
            "description": "deletes existing db and webroot in the profile folder",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "cleanProfileData",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 270,
            "description": "stops the webserver closes the db and set the private running variable to false",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stop",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 288,
            "description": "gui events",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 292,
            "description": "unloads the player",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onPlayerUnload",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 303,
            "description": "unloads the manager",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onManagerUnload",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 314,
            "description": "base unload function for player and manager",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onUnload",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 332,
            "description": "checks if any player and manager instances are open, if not the environment will be stopped.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "checkRte",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 349,
            "description": "server",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 352,
            "description": "starts the internal webserver",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "startServer",
            "params": [
                {
                    "name": "async=false",
                    "description": ""
                }
            ],
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 383,
            "description": "stops the internal webserver",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "stopServer",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 397,
            "description": "addon lifecycle events",
            "class": "env"
        },
        {
            "file": "gui.js",
            "line": 13,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 17,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "once",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 21,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeListener",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 36,
            "description": "sdk packages",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 46,
            "description": "custom modules and variables",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 79,
            "description": "EventListener for startup event, will open a som tab if prefs.autoStart is set",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "startup",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 95,
            "description": "EventListener for downgrade event, will stop the environment components in an unload context \nand in a load context will shutdown all existing player and manager tabs and trigger a new startup()",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "downgrade",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 123,
            "description": "Triggered on tabs.on(\"open\") event.\nChecks if the window title is a player or manager title and initializes the component.\nThe method ensures, that the environment runs and only one manager tab and only one learning module instance is running.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 163,
            "description": "Triggered on tabs.on(\"open\") event and window.title = managerTitle. \nInjects the necessary communication objects and gui scripts to the content.\nAdds load and unload EventListeners to the DOMDocument.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initManager",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 191,
            "description": "Triggered on tabs.on(\"open\") event and window.title = playerTitle. \nInjects the necessary communication objects and gui scripts to the content. \nAdds load and unload EventListeners to the DOMDocument.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initPlayer",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 278,
            "description": "prefs events",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 307,
            "description": "manager and player events",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 340,
            "description": "window events",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 362,
            "description": "tab events",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 383,
            "description": "misc functions",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 428,
            "description": "templates",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 502,
            "description": "gui actions",
            "class": "gui"
        },
        {
            "file": "main.js",
            "line": 17,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 21,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "once",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 25,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeListener",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 46,
            "itemtype": "event",
            "name": "install",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 49,
            "itemtype": "event",
            "name": "enable",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 52,
            "itemtype": "event",
            "name": "startup",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 55,
            "itemtype": "event",
            "name": "uninstall",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 58,
            "itemtype": "event",
            "name": "disable",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 61,
            "itemtype": "event",
            "name": "shutdown",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 64,
            "description": "The event may be fired on loading and unloading the addon. \nTherefore a load=true|false argument is added added on event emitting.",
            "itemtype": "event",
            "name": "upgrade",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 69,
            "description": "The event may be fired on loading and unloading the addon. \nTherefore a load=true|false argument is added on event emitting.",
            "itemtype": "event",
            "name": "downgrade",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 74,
            "description": "The main function is executed after all required classes and all the other main.js code evaluation.\nThe option.loadReason events are emitted for other classes adding listeners like main.on(\"startup\") or main.on(\"install\").\n\nsee also: <a href=\"https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html\" target=\"_new\">https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html</a>",
            "itemtype": "method",
            "name": "main",
            "example": [
                " main.on(\"startup\", function(){ //do something }; )",
                " main.on(\"downgrade\", function(load){ if (load === true) { //do something }; })"
            ],
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "callbacks",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 93,
            "description": "The unload function is executed on unloading the addon.\nAll event reasons are emitted for other modules to add listeners like main.on(\"shutdown\") or main.on(\"uninstall\"))  \n\nsee also: <a href=\"https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html\" target=\"_new\">https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html</a>",
            "itemtype": "method",
            "name": "unload",
            "example": [
                " main.on(\"shutdown\", function(){ //do something }; )",
                " main.on(\"downgrade\", function(load){ if (load === false) { //do something }; })"
            ],
            "params": [
                {
                    "name": "reason",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "main"
        },
        {
            "file": "som.js",
            "line": 16,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 20,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "once",
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 24,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeListener",
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 46,
            "itemtype": "event",
            "name": "allLmChanged",
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 49,
            "description": "gets all imported Learning-Modules (SCORM-Courses) from db",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAllLm",
            "return": {
                "description": "lms",
                "type": "Object"
            },
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 68,
            "itemtype": "event",
            "name": "lmChanged",
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 71,
            "description": "gets a Learning-Module by id from db or a row param",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLmById",
            "params": [
                {
                    "name": "id",
                    "description": "client_{obj_id}",
                    "type": "String"
                },
                {
                    "name": "row=false",
                    "description": "param only available when called from getAllLm",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "lm",
                "type": "Object"
            },
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 117,
            "description": "returns the Learning-Modules Object",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLmsObj",
            "return": {
                "description": "lms",
                "type": "Object"
            },
            "class": "som"
        },
        {
            "file": "utils.js",
            "line": 63,
            "description": "zip functions",
            "class": "utils"
        },
        {
            "file": "utils.js",
            "line": 67,
            "description": "unzip package to directory",
            "params": [
                {
                    "name": "aZipFile",
                    "description": "nsILocalFile source zip file"
                },
                {
                    "name": "aDir",
                    "description": "nsIFile target directory"
                }
            ],
            "class": "utils"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\ngui events",
            "line": " env.js:288"
        },
        {
            "message": "Missing item type\nserver",
            "line": " env.js:349"
        },
        {
            "message": "Missing item type\naddon lifecycle events",
            "line": " env.js:397"
        },
        {
            "message": "Missing item type\nsdk packages",
            "line": " gui.js:36"
        },
        {
            "message": "Missing item type\ncustom modules and variables",
            "line": " gui.js:46"
        },
        {
            "message": "Missing item type\nprefs events",
            "line": " gui.js:278"
        },
        {
            "message": "Missing item type\nmanager and player events",
            "line": " gui.js:307"
        },
        {
            "message": "Missing item type\nwindow events",
            "line": " gui.js:340"
        },
        {
            "message": "Missing item type\ntab events",
            "line": " gui.js:362"
        },
        {
            "message": "Missing item type\nmisc functions",
            "line": " gui.js:383"
        },
        {
            "message": "Missing item type\ntemplates",
            "line": " gui.js:428"
        },
        {
            "message": "Missing item type\ngui actions",
            "line": " gui.js:502"
        },
        {
            "message": "Missing item type\nzip functions",
            "line": " utils.js:63"
        },
        {
            "message": "Missing item type\nunzip package to directory",
            "line": " utils.js:67"
        }
    ]
}