{
    "project": {
        "name": "The SCORM-Offline-Player API",
        "description": "The SCORM-Offline-Player API: a Firefox extension for running SCORM-Courses offline ",
        "version": "0.1",
        "url": "https://github.com/eqsoft"
    },
    "files": {
        "db.js": {
            "name": "db.js",
            "modules": {},
            "classes": {
                "db": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "env.js": {
            "name": "env.js",
            "modules": {},
            "classes": {
                "env": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "gui.js": {
            "name": "gui.js",
            "modules": {},
            "classes": {
                "gui": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "main.js": {
            "name": "main.js",
            "modules": {},
            "classes": {
                "main": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "som.js": {
            "name": "som.js",
            "modules": {},
            "classes": {
                "som": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sqlite.js": {
            "name": "sqlite.js",
            "modules": {},
            "classes": {
                "sqlite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils.js": {
            "name": "utils.js",
            "modules": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "db": {
            "name": "db",
            "shortname": "db",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "db.js",
            "line": 1,
            "description": "Database class"
        },
        "env": {
            "name": "env",
            "shortname": "env",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "env.js",
            "line": 1,
            "description": "environment class\n \nThe environment class is responsible for the availability of a proper runtime: db, profile, io objects and webserver. \nThe run event must be triggered from the som and sop classes, but the env class ensures that the env is running only once.\nThe environment listens to all window tabs and stops if neither som nor sop instances are running.\n\nIf no som instance is open and the env is not running and the user tries to open a bookmarked SCORM course at localhost:serverPort, \nthe httpObserver ensures that the env is running before the network request will be completed."
        },
        "gui": {
            "name": "gui",
            "shortname": "gui",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "gui.js",
            "line": 1,
            "description": "GUI class for SCORM-Offline-Manager and -Player"
        },
        "main": {
            "name": "main",
            "shortname": "main",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "main.js",
            "line": 1,
            "description": "Mandatory addon main class\n \nThe main class receives and emits all load and unload events like \"startup, install, uninstall...\" for all other classes\nTherefore all other classes (env, som, gui, db, utils) needs to be included inside main.js after early binding of the events. \n\nSee also: <a href=\"https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html\" target=\"_new\">https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html</a>"
        },
        "som": {
            "name": "som",
            "shortname": "som",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "som.js",
            "line": 1,
            "description": "SCORM-Offline-Manager class\n\nProvides functions for managing and importing Learning-Modules"
        },
        "sqlite": {
            "name": "sqlite",
            "shortname": "sqlite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sqlite.js",
            "line": 1,
            "description": "Database class"
        },
        "utils": {
            "name": "utils",
            "shortname": "utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "utils.js",
            "line": 1,
            "description": "Utilities class"
        }
    },
    "classitems": [
        {
            "file": "db.js",
            "line": 13,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 17,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "once",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 21,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeListener",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 44,
            "description": "opens the sqlite database sop.sqlite in the profile folder",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "openDb",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 63,
            "description": "closes the sqlite database sop.sqlite in the profile folder",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "closeDb",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 76,
            "description": "gets data from db",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "statement",
                    "description": "the name of the statement",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "asJSONObject",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "asRecordObject=true",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object||String"
            },
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 115,
            "itemtype": "event",
            "name": "lmUserDataChanged",
            "class": "db"
        },
        {
            "file": "db.js",
            "line": 118,
            "description": "gets data from db",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "dbData",
            "params": [
                {
                    "name": "statement",
                    "description": "the name of the statement",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "success",
                "type": "Boolean"
            },
            "class": "db"
        },
        {
            "file": "env.js",
            "line": 21,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 25,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "once",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 29,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeListener",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 46,
            "description": "get the running status\nThe function needs early binding for other classes",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isRunning",
            "return": {
                "description": "running",
                "type": "Boolean"
            },
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 90,
            "description": "IO Object\nProvides all File and Directory Objects",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "io",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 98,
            "description": "Globals Object\nProvides all global Variables",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "globals",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 117,
            "description": "httpObserver\nObserves browser network requests to sop webserver at localhost:serverPort.\nIf the browser requests a Learning-Module and the environment is not running, the observer starts the environment.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "httpRequestObserver",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 127,
            "description": "creates and register httpObserver (called in main.js)\nThe observer must be registered bevor any other objects are initialized.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "httpRequestObserver",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 188,
            "itemtype": "event",
            "name": "run",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 191,
            "description": "starts the environment components (io, db, server) and populates the profile\n\nemits a run event",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "run",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 215,
            "description": "initialize all necessary file and directory objects",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initIO",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 251,
            "description": "populates the profile folder with an initial db and a webserver root folder with the SCORM-Offline-Player files if not exists.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "populateProfile",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 285,
            "description": "deletes existing db and webroot in the profile folder",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "cleanProfileData",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 306,
            "description": "stops the webserver closes the db and set the private running variable to false",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stop",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 328,
            "description": "unloads the player",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onPlayerUnload",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 339,
            "description": "unloads the manager",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onManagerUnload",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 350,
            "description": "base unload function for player and manager",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onUnload",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 368,
            "description": "checks if any player and manager instances are open, if not the environment will be stopped.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "checkRte",
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 388,
            "description": "starts the internal webserver",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "startServer",
            "params": [
                {
                    "name": "async=false",
                    "description": ""
                }
            ],
            "class": "env"
        },
        {
            "file": "env.js",
            "line": 419,
            "description": "stops the internal webserver",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "stopServer",
            "class": "env"
        },
        {
            "file": "gui.js",
            "line": 13,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 17,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "once",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 21,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeListener",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 78,
            "description": "EventListener for startup event, will open a som tab if prefs.autoStart is set",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "startup",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 94,
            "description": "EventListener for downgrade event, will stop the environment components in an unload context \nand in a load context will shutdown all existing player and manager tabs and trigger a new startup()",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "downgrade",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 122,
            "description": "Triggered on tabs.on(\"open\") event.\nChecks if the window title is a player or manager title and initializes the component.\nThe method ensures, that the environment runs and only one manager tab and only one learning module instance is running.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 171,
            "description": "Triggered on tabs.on(\"open\") event and window.title = managerTitle. \nInjects the necessary communication objects and gui scripts to the content.\nAdds load and unload EventListeners to the DOMDocument.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initManager",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 197,
            "description": "Triggered on tabs.on(\"open\") event and window.title = playerTitle. \nInjects the necessary communication objects and gui scripts to the content. \nAdds load and unload EventListeners to the DOMDocument.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initPlayer",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 255,
            "description": "Opens a Tab with SCORM-Offline-Manager",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "openSomTab",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 265,
            "description": "Returns the Manager Tab",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getMTab",
            "return": {
                "description": "mtab",
                "type": "Object"
            },
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 275,
            "description": "Returns the Object with all active player instances",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getPs",
            "return": {
                "description": "ps",
                "type": "Object"
            },
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 285,
            "description": "Activates the Manager Tab",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "activateManager",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 304,
            "description": "Activates a Player Tab with the given id",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "activatePlayer",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 323,
            "description": "opens an new or activate an existing SOM Instance (called from a player instance)",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "openSomHome",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 340,
            "description": "eventHandler for preference button \"Start SOM\". \nclose existing som tab and starts a new one.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onPrefStartSom",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 353,
            "description": "eventHandler for preference button \"Stop SOM\". \nclose existing som tab and window references and stops the environment",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onPrefStopSom",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 370,
            "description": "eventHandler for preference button \"Reset SOM\". \nstop som, reset to the profile factory setting and start som",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onPrefResetSom",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 386,
            "description": "eventHandler for preference button \"SOM Skin\". \nswitches the som skin css on the fly (android: need a firefox restart)",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onPrefSkin",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 405,
            "description": "eventHandler bound to the manager dom window (mw) load event. \nfetches all learning modules and if player instances of lms are open, the status signal is set to \"running\"",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onManagerLoad",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 420,
            "itemtype": "event",
            "name": "managerUnload",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 423,
            "description": "eventHandler bound to the manager dom window (mw) unload event. \nsetting the global variables mw and mtab to null and emitting managerUnload event",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onManagerUnload",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 437,
            "itemtype": "event",
            "name": "playerLoad",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 440,
            "description": "eventHandler bound to the players dom window (ps[p.id].wrapWin) load event. \nrendering running status of actual lm and emitting playerLoad event",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onPlayerLoad",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 453,
            "itemtype": "event",
            "name": "playerUnload",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 456,
            "description": "eventHandler bound to the players dom window (ps[p.id].wrapWin) unload event. \ndeleting ps[p.id] object, rendering running status and emitting playerUnload event",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onPlayerUnload",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 473,
            "description": "eventhandler triggered on all new window.open events\nneeded for controlling a player window dragged to a new browser window (see checkNewWindow)",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onWinOpen",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 486,
            "description": "eventhandler triggered on all window.close events\nonly event logging",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onWinClose",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 497,
            "description": "eventhandler triggered on all window.activate events\nonly event logging",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onWinActivate",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 508,
            "description": "eventhandler triggered on all window.deactivate events\nonly event logging",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onWinDeactivate",
            "params": [
                {
                    "name": "window",
                    "description": "",
                    "type": "Window Object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 522,
            "description": "eventhandler triggered on all tab.ready events\ntriggers init(tab) for initialization of manager and player tabs",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onTabReady",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Tab Object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 535,
            "description": "eventhandler triggered on all tab.close events\nonly event logging",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onTabClose",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Tab Object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 547,
            "description": "eventhandler triggered on all tab.activate events\nonly event logging",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onTabActivate",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Tab Object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 559,
            "description": "eventhandler triggered on all tab.deactivate events\nonly event logging",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onTabDeactivate",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Tab Object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 573,
            "description": "dragging an existing player tab to a new browser window needs updating the ps[p.id] window and tab objects",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "checkNewWindow",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Tab Object"
                },
                {
                    "name": "brWin",
                    "description": "",
                    "type": "BrowserWindow object"
                }
            ],
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 592,
            "description": "returns an lm.id created from querystring paramters",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getId",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Params Object"
                }
            ],
            "return": {
                "description": "id",
                "type": "String"
            },
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 609,
            "description": "returns true if url is a player url",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isPlayerUrl",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "p.id if url is a player url else false",
                "type": "String|Boolean"
            },
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 627,
            "description": "returns true if url is a player url",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isPlayerOpen",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if url is a player with id is open",
                "type": "Boolean"
            },
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 639,
            "description": "closes recent empty tabs",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "closeRecentTab",
            "class": "gui"
        },
        {
            "file": "gui.js",
            "line": 652,
            "description": "get player id from url",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getIdFromUrl",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "player id else false",
                "type": "String|Boolean"
            },
            "class": "gui"
        },
        {
            "file": "main.js",
            "line": 17,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 21,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "once",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 25,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeListener",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 49,
            "itemtype": "event",
            "name": "install",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 52,
            "itemtype": "event",
            "name": "enable",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 55,
            "itemtype": "event",
            "name": "startup",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 58,
            "itemtype": "event",
            "name": "uninstall",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 61,
            "itemtype": "event",
            "name": "disable",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 64,
            "itemtype": "event",
            "name": "shutdown",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 67,
            "description": "The event may be fired on loading and unloading the addon. \nTherefore a load=true|false argument is added added on event emitting.",
            "itemtype": "event",
            "name": "upgrade",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 72,
            "description": "The event may be fired on loading and unloading the addon. \nTherefore a load=true|false argument is added on event emitting.",
            "itemtype": "event",
            "name": "downgrade",
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 77,
            "description": "The main function is executed after all required classes and all the other main.js code evaluation.\nThe option.loadReason events are emitted for other classes adding listeners like main.on(\"startup\") or main.on(\"install\").\n\nsee also: <a href=\"https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html\" target=\"_new\">https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html</a>",
            "itemtype": "method",
            "name": "main",
            "example": [
                " main.on(\"startup\", function(){ //do something }; )",
                " main.on(\"downgrade\", function(load){ if (load === true) { //do something }; })"
            ],
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "callbacks",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "main"
        },
        {
            "file": "main.js",
            "line": 96,
            "description": "The unload function is executed on unloading the addon.\nAll event reasons are emitted for other modules to add listeners like main.on(\"shutdown\") or main.on(\"uninstall\"))  \n\nsee also: <a href=\"https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html\" target=\"_new\">https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/load-and-unload.html</a>",
            "itemtype": "method",
            "name": "unload",
            "example": [
                " main.on(\"shutdown\", function(){ //do something }; )",
                " main.on(\"downgrade\", function(load){ if (load === false) { //do something }; })"
            ],
            "params": [
                {
                    "name": "reason",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "main"
        },
        {
            "file": "som.js",
            "line": 18,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 22,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "once",
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 26,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeListener",
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 49,
            "itemtype": "event",
            "name": "allLmChanged",
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 52,
            "description": "gets all imported Learning-Modules (SCORM-Courses) from db",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAllLm",
            "return": {
                "description": "lms",
                "type": "Object"
            },
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 73,
            "itemtype": "event",
            "name": "lmChanged",
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 76,
            "description": "gets a Learning-Module by id from db or a row param",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLmById",
            "params": [
                {
                    "name": "id",
                    "description": "client_{obj_id}",
                    "type": "String"
                },
                {
                    "name": "silent",
                    "description": "dont emit event",
                    "type": "Boolean"
                },
                {
                    "name": "param",
                    "description": "row=false only available when called from getAllLm",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "lm",
                "type": "Object"
            },
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 125,
            "description": "returns the Learning-Modules Object",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLmsObj",
            "return": {
                "description": "lms",
                "type": "Object"
            },
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 137,
            "description": "checks if outgoing localhost request is importRequest from host",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isImportRequest",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 149,
            "description": "imports a Learning Module Content Zip",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "importLm",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 222,
            "description": "imports tracking data",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "importTracking",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "base64",
                    "description": "url",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function",
                    "type": "Function"
                }
            ],
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 270,
            "description": "pushes tracking data",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "pushTracking",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "base64",
                    "description": "url",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function",
                    "type": "Function"
                }
            ],
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 283,
            "description": "get the offline url for LM",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getOfflineUrl",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "url"
            },
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 305,
            "description": "ASCII to Base64",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "atoB",
            "params": [
                {
                    "name": "txt",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "som"
        },
        {
            "file": "som.js",
            "line": 316,
            "description": "Base64 to ASCII",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "btoA",
            "params": [
                {
                    "name": "txt",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ASCII",
                "type": "String"
            },
            "class": "som"
        },
        {
            "file": "sqlite.js",
            "line": 13,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "class": "sqlite"
        },
        {
            "file": "sqlite.js",
            "line": 17,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "once",
            "class": "sqlite"
        },
        {
            "file": "sqlite.js",
            "line": 21,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeListener",
            "class": "sqlite"
        },
        {
            "file": "utils.js",
            "line": 17,
            "description": "log message to console",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "msg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "utils"
        },
        {
            "file": "utils.js",
            "line": 31,
            "description": "log error to console",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "err",
            "params": [
                {
                    "name": "msg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "utils"
        },
        {
            "file": "utils.js",
            "line": 47,
            "description": "return true if obj contains a",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "a",
                    "description": "to search for",
                    "type": "Object"
                },
                {
                    "name": "obj",
                    "description": "to search in",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if obj contains a",
                "type": "Boolean"
            },
            "class": "utils"
        },
        {
            "file": "utils.js",
            "line": 65,
            "description": "return true if sop is running on a mobile device (Browser: Fennec)",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isMobile",
            "return": {
                "description": "true if sop is running on a mobile device (Browser: Fennec)",
                "type": "Boolean"
            },
            "class": "utils"
        },
        {
            "file": "utils.js",
            "line": 78,
            "description": "unzip package to directory",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "extractFiles",
            "params": [
                {
                    "name": "aZipFile",
                    "description": "source zip file",
                    "type": "NsILocalFile"
                },
                {
                    "name": "aDir",
                    "description": "target directory",
                    "type": "NsIFile"
                }
            ],
            "class": "utils"
        },
        {
            "file": "utils.js",
            "line": 159,
            "description": "shows FilePicker and extract zip to a folder (not used)",
            "itemtype": "method",
            "name": "showPicker",
            "class": "utils"
        },
        {
            "file": "utils.js",
            "line": 183,
            "description": "returns true if a key exists in an object",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "findIn",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "true if a key exists in an object"
            },
            "class": "utils"
        }
    ],
    "warnings": []
}